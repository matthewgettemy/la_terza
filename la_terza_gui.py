"""Subclass of LaTerzaFrame, which is generated by wxFormBuilder."""

import wx
import pprint
import datetime
import woocommerce
import configparser
import wx.lib.mixins.listctrl as listmix
from requests.exceptions import ReadTimeout

import la_terza_gui_objects
import order


class LaTerza(la_terza_gui_objects.LaTerzaFrame, listmix.ColumnSorterMixin):

    def __init__(self, parent):
        la_terza_gui_objects.LaTerzaFrame.__init__(self, parent)
        self.parse_config()
        self.wc_api = woocommerce.API(url=self.config['DEFAULT']['url'],
                                      consumer_key=self.config['DEFAULT']['ck'],
                                      consumer_secret=self.config['DEFAULT']['cs'],
                                      wp_api=True,
                                      version="wc/v3") # TODO: fill in keys for this to work!
        self.customer_orders = {}
        self.update_order_table(0)
        listmix.ColumnSorterMixin.__init__(self, self.order_control.GetColumnCount())
        self.SetIcon(wx.Icon("icons/coffee_bag.ico"))

    def GetListCtrl(self):
        return self.order_control

    def parse_config(self):
        self.config = configparser.ConfigParser()
        self.config.read('keys.ini')

    def update_order_table(self, event):
        self.clear_orders()
        self.get_orders()
        self.set_column_headers()
        all_items = self.get_all_items()
        self.add_items_to_control(all_items)

    def mark_complete(self, event):
        pass

    def mark_processing(self, event):
        pass

    def mark_order_complete(self, event):
        row_number = self.order_control.GetFirstSelected()
        order_id = self.order_control.GetItem(row_number, 7).GetText()
        for i in range(10):
            try:
                a = self.wc_api.put('orders/{}'.format(order_id), {'status': 'processing'})
                break
            except ReadTimeout:
                print(i)
        print(a.json())

        self.clear_orders()
        self.get_orders()
        all_items = self.get_all_items()
        self.add_items_to_control(all_items)

    def get_orders(self):
        raw_orders = self.wc_api.get('orders', params={'per_page': 100})
        print(raw_orders.json())
        print(len(raw_orders.json()))
        pp = pprint.PrettyPrinter()
        pp.pprint(raw_orders.json()[0])
        for order_json in raw_orders.json():
            self.customer_orders[order_json['id']] = order.Order(order_json)
        [self.customer_orders[order_id].parse_items() for order_id in self.customer_orders]
        [self.customer_orders[order_id].get_shipping_info() for order_id in self.customer_orders]

    def date_updated(self, event):

        def wx_to_datetime(date):
            if date.IsValid():
                ymd = map(int, date.FormatISODate().split('-'))
                return datetime.date(*ymd)
            else:
                return None

        chosen_date = self.calendar.GetDate()
        chosen_date = wx_to_datetime(chosen_date)
        self.clear_orders()
        orders_items = self.get_items_due(chosen_date)
        self.add_items_to_control(orders_items)

    def clear_orders(self):
        self.order_control.DeleteAllItems()

    def get_all_items(self):
        orders_items = {}
        for order_id in self.customer_orders:
            for item_id in self.customer_orders[order_id].items:
                if order_id in orders_items:
                    orders_items[order_id].append(item_id)
                else:
                    orders_items[order_id] = [item_id]
        return orders_items

    def get_items_due(self, date):
        orders_items = {}
        for order_id in self.customer_orders:
            for item_id in self.customer_orders[order_id].items:
                item = self.customer_orders[order_id].items[item_id]
                if date in item.roast_dates:
                    if order_id in orders_items:
                        orders_items[order_id].append(item_id)
                    else:
                        orders_items[order_id] = [item_id]
        return orders_items

    def add_items_to_control(self, orders_items):

        tmp = {}

        index = 0
        for order_id in orders_items:
            customer_order = self.customer_orders[order_id]
            for item_id in orders_items[order_id]:
                item = customer_order.items[item_id]

                tmp[index] = (item.id, item.name, ' '.join(customer_order.date_created.split('T')), customer_order.status,
                              customer_order.shipping.first_name + ' ' + customer_order.shipping.last_name, customer_order.customer_note,
                              item.price, customer_order.id)

                self.order_control.InsertItem(index, str(item.id))
                self.order_control.SetItem(index, 1, str(item.name))
                self.order_control.SetItem(index, 2, str(' '.join(customer_order.date_created.split('T'))))
                self.order_control.SetItem(index, 3, str(customer_order.status))
                self.order_control.SetItem(index, 4, str(customer_order.shipping.first_name + ' ' + customer_order.shipping.last_name))
                self.order_control.SetItem(index, 5, str(customer_order.customer_note))
                self.order_control.SetItem(index, 6, str(item.price))
                self.order_control.SetItem(index, 7, str(customer_order.id))
                self.order_control.SetItemData(index, index)
                index += 1
        self.itemDataMap = tmp

    def set_column_headers(self):
        self.order_control.InsertColumn(0, 'item id')
        self.order_control.InsertColumn(1, 'name')
        self.order_control.InsertColumn(2, 'date ordered')
        self.order_control.InsertColumn(3, 'status')
        self.order_control.InsertColumn(4, 'customer')
        self.order_control.InsertColumn(5, 'note')
        self.order_control.InsertColumn(6, 'total')
        self.order_control.InsertColumn(7, 'order id')

        self.order_control.SetColumnWidth(0, 50)
        self.order_control.SetColumnWidth(1, 150)
        self.order_control.SetColumnWidth(2, 150)
        self.order_control.SetColumnWidth(3, 100)
        self.order_control.SetColumnWidth(4, 120)
        self.order_control.SetColumnWidth(5, 50)
        self.order_control.SetColumnWidth(5, 50)
        self.order_control.SetColumnWidth(5, 50)

        #index = 0
        #for order_id in self.customer_orders:
        #    customer_order = self.customer_orders[order_id]
        #    for item_id in self.customer_orders[order_id].items:
        #        item = self.customer_orders[order_id].items[item_id]
        #        self.order_control.InsertItem(index, str(item.id))
        #        self.order_control.SetItem(index, 1, str(item.name))
        #        self.order_control.SetItem(index, 2, str(' '.join(customer_order.date_created.split('T'))))
        #        self.order_control.SetItem(index, 3, str(customer_order.status))
        #        self.order_control.SetItem(index, 4, str(customer_order.shipping.first_name + ' ' + customer_order.shipping.last_name))
        #        self.order_control.SetItem(index, 5, str(customer_order.customer_note))
        #        self.order_control.SetItem(index, 6, str(item.price))
        #        self.order_control.SetItem(index, 7, str(customer_order.id))
        #        index += 1


class LaTerzaGui(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame = LaTerza(None)
        self.SetTopWindow(frame)
        frame.Show()
        return 1


if __name__ == "__main__":
    ltg = LaTerzaGui(0)
    ltg.MainLoop()
